dotnet ef migrations add InitialIdentityServerPersistedGrantDbMigration -c PersistedGrantDbContext -o Data/Migrations/IdentityServer/PersistedGrantDb
dotnet ef migrations add InitialIdentityServerConfigurationDbMigration -c ConfigurationDbContext -o Data/Migrations/IdentityServer/ConfigurationDb
dotnet ef migrations add InitialIdentityServerConfigurationDbMigration -c AppDbContext -o Data/Migrations/AppDbContext


dotnet ef database update -c AppDbContext
dotnet ef database update -c PersistedGrantDbContext
dotnet ef database update -c ConfigurationDbContext




//https://docs.microsoft.com/en-us/archive/blogs/kaevans/using-powershell-with-certificates
//Generate certificate

$cert = New-SelfSignedCertificate -Subject "CN=IdentitiyServer" -CertStoreLocation cert:\CurrentUser\My -Provider "Microsoft Strong Cryptographic Provider"

//Get your certificates
Get-ChildItem -Path cert:\CurrentUser\My


$cert = Get-ChildItem -Path cert:\CurrentUser\My | ?{$_.Subject -eq "CN=IdentitiyServer"}
$cred = Get-Credential
Export-PfxCertificate -Cert $cert -Password $cred.Password -FilePath "./identityServerCert.pfx"



//Generate certificate for react app

$cert = Get-ChildItem -Path cert:\CurrentUser\My | ?{$_.Subject -eq "CN=IdentitiyServer"}
$cred = Get-Credential
$cred | Export-CliXml -Path "./key.cred"
Export-PfxCertificate -Cert $cert -Password $cred.Password -FilePath "./identityServerCert.pfx"


$InsertLineBreaks=1
$oMachineCert=get-item Cert:\CurrentUser\My\5265C6455891815FDCA2707E7448C1A308919B46
$oPem=new-object System.Text.StringBuilder
$oPem.AppendLine("-----BEGIN CERTIFICATE-----")
$oPem.AppendLine([System.Convert]::ToBase64String($oMachineCert.RawData,$InsertLineBreaks))
$oPem.AppendLine("-----END CERTIFICATE-----")
$oPem.ToString() | out-file ./identityServerCert.pem
